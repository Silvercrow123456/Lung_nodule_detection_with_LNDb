# -*- coding: utf-8 -*-
"""zero_center.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CHUNzFOV_0fXcAlf2relShiQiqfCReY8
"""

### Pre-processing pipeline 1
MIN_BOUND = -1000.0 #HU values
MAX_BOUND = 400.0 #HU value

def normalize(image):
     image = (image - MIN_BOUND) / (MAX_BOUND - MIN_BOUND)
     image[image>1] = 1
     image[image<0] = 0
     image = (image*255).astype('uint8')
     return image
PIXEL_MEAN = 0.25

def zero_center(image):
     image = image - PIXEL_MEAN
     image = (image).astype('uint8')
     return image
### Extracting 2D RGB images with nodule
#### Pipeline 1 extract images (zero_center)
# Read nodules csv
csvlines = readCsv('/content/gdrive/MyDrive/training_data_lung_nodule/trainNodules.csv')
header = csvlines[0]
nodules = csvlines[1:]

for n in nodules:
     lnd = int(n[header.index('LNDbID')])
     rad = int(n[header.index('RadID')])
     finding = int(n[header.index('FindingID')])

     if int(n[header.index('LNDbID')])==lnd and int(n[header.index('RadID')])==rad and int(n[header.index('FindingID')])==finding:
         ctr = np.array([float(n[header.index('x')]), float(n[header.index('y')]), float(n[header.index('z')])])
         class_label = np.array([int(n[header.index('Nodule')])])

         name = lnd
     if name in confirmed.index:

         [scan,spacing,origin,transfmat] = readMhd(f'/content/gdrive/MyDrive/training_data_lung_nodule/train/LNDb-{lnd:04}.mhd'.format(lnd=lnd))
         transfmat_toimg,transfmat_toworld = getImgWorldTransfMats(spacing,transfmat)
         ctr = convertToImgCoord(ctr,origin,transfmat_toimg)

         # 2D slice with nodule center
         scan_slice = scan[int(ctr[2])]
         scan_norm = normalize(scan_slice)
         scan_norm_zero = zero_center(scan_norm)

         # Previous slice
         scan_slice_previous = scan[int(ctr[2])-1]
         scan_norm_pre = normalize(scan_slice_previous)
         scan_norm_zero_pre = zero_center(scan_norm_pre)

         # Next slice
         scan_slice_next = scan[int(ctr[2])+1]
         scan_norm_next = normalize(scan_slice_next)
         scan_norm_zero_next = zero_center(scan_norm_next)

         # Resize the image
         width = 512
         height = 512
         dim = (height, width)
         resized = cv2.resize(scan_norm_zero, dim, interpolation = cv2.INTER_AREA)
         resized_previous = cv2.resize(scan_norm_zero_pre, dim, interpolation = cv2.INTER_AREA)
         resized_next = cv2.resize(scan_norm_zero_next, dim, interpolation = cv2.INTER_AREA)

         # Create a 3 channel RBG image
         R = np.stack((resized_previous, resized, resized_next), axis=2)

         # Save the 3 channel images as jpg
         cv2.imwrite(f'/content/train_jpg/zero_center/LNDb-{lnd:04d}_finding{finding}_rad{rad}.jpg'.format(lnd=lnd,finding=finding,rad=rad), R)